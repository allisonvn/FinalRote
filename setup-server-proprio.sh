#!/bin/bash

echo "üîß Configura√ß√£o para Servidor Pr√≥prio - Next.js"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script no diret√≥rio raiz do projeto (onde est√° o package.json)"
    exit 1
fi

log "üöÄ Configurando servidor pr√≥prio para Next.js..."

# 1. Verificar tipo de servidor
log "1. Verificando tipo de servidor web..."

if command -v apache2 &> /dev/null; then
    SERVER_TYPE="apache"
    success "Apache detectado"
elif command -v nginx &> /dev/null; then
    SERVER_TYPE="nginx"
    success "Nginx detectado"
else
    warning "Nenhum servidor web detectado. Usando configura√ß√µes gen√©ricas."
    SERVER_TYPE="generic"
fi

# 2. Fazer build da aplica√ß√£o
log "2. Fazendo build da aplica√ß√£o..."
rm -rf .next
npm run build

if [ $? -eq 0 ]; then
    success "Build executada com sucesso"
else
    error "Falha na build"
    exit 1
fi

# 3. Configurar servidor web
log "3. Configurando servidor web..."

if [ "$SERVER_TYPE" = "apache" ]; then
    log "Configurando Apache..."
    
    # Copiar .htaccess para o diret√≥rio web
    if [ -f ".htaccess" ]; then
        cp .htaccess /var/www/html/ 2>/dev/null || cp .htaccess /var/www/ 2>/dev/null || warning "N√£o foi poss√≠vel copiar .htaccess automaticamente"
        success "Arquivo .htaccess configurado"
    else
        error "Arquivo .htaccess n√£o encontrado"
    fi
    
    # Habilitar mod_rewrite
    sudo a2enmod rewrite 2>/dev/null || warning "N√£o foi poss√≠vel habilitar mod_rewrite automaticamente"
    sudo a2enmod headers 2>/dev/null || warning "N√£o foi poss√≠vel habilitar mod_headers automaticamente"
    sudo a2enmod deflate 2>/dev/null || warning "N√£o foi poss√≠vel habilitar mod_deflate automaticamente"
    
    # Reiniciar Apache
    sudo systemctl restart apache2 2>/dev/null || sudo service apache2 restart 2>/dev/null || warning "N√£o foi poss√≠vel reiniciar Apache automaticamente"
    
elif [ "$SERVER_TYPE" = "nginx" ]; then
    log "Configurando Nginx..."
    
    # Copiar configura√ß√£o do Nginx
    if [ -f "nginx.conf" ]; then
        sudo cp nginx.conf /etc/nginx/sites-available/rotafinal 2>/dev/null || warning "N√£o foi poss√≠vel copiar configura√ß√£o do Nginx automaticamente"
        sudo ln -sf /etc/nginx/sites-available/rotafinal /etc/nginx/sites-enabled/ 2>/dev/null || warning "N√£o foi poss√≠vel habilitar site automaticamente"
        success "Configura√ß√£o do Nginx aplicada"
    else
        error "Arquivo nginx.conf n√£o encontrado"
    fi
    
    # Testar configura√ß√£o
    sudo nginx -t 2>/dev/null || warning "Configura√ß√£o do Nginx pode ter problemas"
    
    # Reiniciar Nginx
    sudo systemctl restart nginx 2>/dev/null || sudo service nginx restart 2>/dev/null || warning "N√£o foi poss√≠vel reiniciar Nginx automaticamente"
fi

# 4. Configurar PM2 para produ√ß√£o
log "4. Configurando PM2 para produ√ß√£o..."

# Instalar PM2 se n√£o estiver instalado
if ! command -v pm2 &> /dev/null; then
    log "Instalando PM2..."
    npm install -g pm2
fi

# Criar configura√ß√£o do PM2
cat > ecosystem.config.js << 'EOF'
module.exports = {
  apps: [{
    name: 'rotafinal',
    script: 'npm',
    args: 'start',
    cwd: '/Users/allisonnascimento/Desktop/site/rotafinal',
    instances: 1,
    autorestart: true,
    watch: false,
    max_memory_restart: '1G',
    env: {
      NODE_ENV: 'production',
      PORT: 3000
    },
    error_file: './logs/err.log',
    out_file: './logs/out.log',
    log_file: './logs/combined.log',
    time: true
  }]
}
EOF

success "Configura√ß√£o do PM2 criada"

# 5. Criar diret√≥rio de logs
mkdir -p logs
success "Diret√≥rio de logs criado"

# 6. Iniciar aplica√ß√£o com PM2
log "5. Iniciando aplica√ß√£o com PM2..."

# Parar inst√¢ncia anterior se existir
pm2 stop rotafinal 2>/dev/null || true
pm2 delete rotafinal 2>/dev/null || true

# Iniciar nova inst√¢ncia
pm2 start ecosystem.config.js

if [ $? -eq 0 ]; then
    success "Aplica√ß√£o iniciada com PM2"
else
    error "Falha ao iniciar aplica√ß√£o com PM2"
fi

# 7. Configurar proxy reverso
log "6. Configurando proxy reverso..."

if [ "$SERVER_TYPE" = "apache" ]; then
    log "Apache j√° configurado com proxy reverso no .htaccess"
elif [ "$SERVER_TYPE" = "nginx" ]; then
    log "Nginx j√° configurado com proxy reverso no nginx.conf"
else
    warning "Configure manualmente o proxy reverso para localhost:3000"
fi

# 8. Verificar status
log "7. Verificando status da aplica√ß√£o..."

# Verificar se a aplica√ß√£o est√° rodando
if curl -s http://localhost:3000 > /dev/null; then
    success "Aplica√ß√£o respondendo em localhost:3000"
else
    warning "Aplica√ß√£o n√£o est√° respondendo em localhost:3000"
fi

# Verificar PM2
pm2 status

# 9. Instru√ß√µes finais
echo ""
log "üìã INSTRU√á√ïES FINAIS"
echo "==================="

echo "‚úÖ Build executada com sucesso"
echo "‚úÖ Configura√ß√£o do servidor aplicada"
echo "‚úÖ PM2 configurado e iniciado"
echo "‚úÖ Proxy reverso configurado"

echo ""
log "üîß COMANDOS √öTEIS:"
echo "‚Ä¢ Ver status: pm2 status"
echo "‚Ä¢ Ver logs: pm2 logs rotafinal"
echo "‚Ä¢ Reiniciar: pm2 restart rotafinal"
echo "‚Ä¢ Parar: pm2 stop rotafinal"
echo "‚Ä¢ Iniciar: pm2 start rotafinal"

echo ""
log "üåê TESTAR APLICA√á√ÉO:"
echo "‚Ä¢ Local: http://localhost:3000"
echo "‚Ä¢ Produ√ß√£o: https://rotafinal.com.br"

echo ""
log "üîç VERIFICAR CHUNKS:"
echo "curl -I https://rotafinal.com.br/_next/static/chunks/webpack-*.js"
echo "Deve retornar: Content-Type: application/javascript"

echo ""
if [ "$SERVER_TYPE" = "apache" ]; then
    log "üìÅ ARQUIVOS IMPORTANTES:"
    echo "‚Ä¢ .htaccess - Configura√ß√£o do Apache"
    echo "‚Ä¢ ecosystem.config.js - Configura√ß√£o do PM2"
    echo "‚Ä¢ .next/ - Build da aplica√ß√£o"
elif [ "$SERVER_TYPE" = "nginx" ]; then
    log "üìÅ ARQUIVOS IMPORTANTES:"
    echo "‚Ä¢ nginx.conf - Configura√ß√£o do Nginx"
    echo "‚Ä¢ ecosystem.config.js - Configura√ß√£o do PM2"
    echo "‚Ä¢ .next/ - Build da aplica√ß√£o"
fi

echo ""
success "Configura√ß√£o do servidor pr√≥prio conclu√≠da! üéâ"

echo ""
warning "IMPORTANTE:"
echo "1. Verifique se o proxy reverso est√° funcionando"
echo "2. Teste os chunks em produ√ß√£o"
echo "3. Monitore os logs do PM2"
echo "4. Configure SSL se necess√°rio"
